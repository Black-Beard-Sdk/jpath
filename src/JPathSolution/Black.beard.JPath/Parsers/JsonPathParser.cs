//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JsonPathParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.JPath.Parsers {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class JsonPathParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		CURRENT_VALUE=1, RECURSIVE_DESCENT=2, ROOT_VALUE=3, SUBSCRIPT=4, WILDCARD_SUBSCRIPT=5, 
		OR=6, AND=7, EQ=8, GE=9, GT=10, LE=11, LT=12, NE=13, NOT=14, IN=15, NIN=16, 
		SUBSETOF=17, CONTAINS=18, SIZE=19, EMPTY=20, TRUE=21, FALSE=22, NULL=23, 
		BRACE_LEFT=24, BRACE_RIGHT=25, BRACKET_LEFT=26, BRACKET_RIGHT=27, COLON=28, 
		COMMA=29, PAREN_LEFT=30, PAREN_RIGHT=31, QUESTION=32, ID=33, IDQUOTED=34, 
		STRING=35, NUMBER=36, WS=37;
	public const int
		RULE_jsonpath = 0, RULE_jsonpath_ = 1, RULE_jsonpath__ = 2, RULE_jsonpath_subscript = 3, 
		RULE_subscriptables = 4, RULE_subscriptableArguments = 5, RULE_subscriptableBareword = 6, 
		RULE_jsonPath_identifier = 7, RULE_subscriptable = 8, RULE_sliceable = 9, 
		RULE_sliceableLeft = 10, RULE_sliceableRight = 11, RULE_sliceableBinary = 12, 
		RULE_expression = 13, RULE_binaryOperator = 14, RULE_json = 15, RULE_obj = 16, 
		RULE_pair = 17, RULE_array = 18, RULE_value = 19;
	public static readonly string[] ruleNames = {
		"jsonpath", "jsonpath_", "jsonpath__", "jsonpath_subscript", "subscriptables", 
		"subscriptableArguments", "subscriptableBareword", "jsonPath_identifier", 
		"subscriptable", "sliceable", "sliceableLeft", "sliceableRight", "sliceableBinary", 
		"expression", "binaryOperator", "json", "obj", "pair", "array", "value"
	};

	private static readonly string[] _LiteralNames = {
		null, "'@'", "'..'", "'$'", "'.'", "'*'", "'||'", "'&&'", "'=='", "'>='", 
		"'>'", "'<='", "'<'", "'!='", "'!'", "'in'", "'nin'", "'subsetof'", "'contains'", 
		"'size'", "'empty'", "'true'", "'false'", "'null'", "'{'", "'}'", "'['", 
		"']'", "':'", "','", "'('", "')'", "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "CURRENT_VALUE", "RECURSIVE_DESCENT", "ROOT_VALUE", "SUBSCRIPT", 
		"WILDCARD_SUBSCRIPT", "OR", "AND", "EQ", "GE", "GT", "LE", "LT", "NE", 
		"NOT", "IN", "NIN", "SUBSETOF", "CONTAINS", "SIZE", "EMPTY", "TRUE", "FALSE", 
		"NULL", "BRACE_LEFT", "BRACE_RIGHT", "BRACKET_LEFT", "BRACKET_RIGHT", 
		"COLON", "COMMA", "PAREN_LEFT", "PAREN_RIGHT", "QUESTION", "ID", "IDQUOTED", 
		"STRING", "NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JsonPathParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JsonPathParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JsonPathParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JsonPathParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class JsonpathContext : ParserRuleContext {
		public ITerminalNode ROOT_VALUE() { return GetToken(JsonPathParser.ROOT_VALUE, 0); }
		public ITerminalNode Eof() { return GetToken(JsonPathParser.Eof, 0); }
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public JsonpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonpathContext jsonpath() {
		JsonpathContext _localctx = new JsonpathContext(Context, State);
		EnterRule(_localctx, 0, RULE_jsonpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 40; Match(ROOT_VALUE);
			State = 42;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << RECURSIVE_DESCENT) | (1L << SUBSCRIPT) | (1L << BRACKET_LEFT))) != 0)) {
				{
				State = 41; jsonpath_subscript();
				}
			}

			State = 44; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_Context : ParserRuleContext {
		public ITerminalNode ROOT_VALUE() { return GetToken(JsonPathParser.ROOT_VALUE, 0); }
		public ITerminalNode CURRENT_VALUE() { return GetToken(JsonPathParser.CURRENT_VALUE, 0); }
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public Jsonpath_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_Context jsonpath_() {
		Jsonpath_Context _localctx = new Jsonpath_Context(Context, State);
		EnterRule(_localctx, 2, RULE_jsonpath_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			_la = TokenStream.LA(1);
			if ( !(_la==CURRENT_VALUE || _la==ROOT_VALUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 48;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 47; jsonpath_subscript();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath__Context : ParserRuleContext {
		public Jsonpath_Context jsonpath_() {
			return GetRuleContext<Jsonpath_Context>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Jsonpath__Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath__; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath__(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath__Context jsonpath__() {
		Jsonpath__Context _localctx = new Jsonpath__Context(Context, State);
		EnterRule(_localctx, 4, RULE_jsonpath__);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_VALUE:
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50; jsonpath_();
				}
				break;
			case TRUE:
			case FALSE:
			case NULL:
			case BRACE_LEFT:
			case BRACKET_LEFT:
			case IDQUOTED:
			case STRING:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51; value();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Jsonpath_subscriptContext : ParserRuleContext {
		public ITerminalNode RECURSIVE_DESCENT() { return GetToken(JsonPathParser.RECURSIVE_DESCENT, 0); }
		public SubscriptableBarewordContext subscriptableBareword() {
			return GetRuleContext<SubscriptableBarewordContext>(0);
		}
		public SubscriptablesContext subscriptables() {
			return GetRuleContext<SubscriptablesContext>(0);
		}
		public Jsonpath_subscriptContext jsonpath_subscript() {
			return GetRuleContext<Jsonpath_subscriptContext>(0);
		}
		public ITerminalNode SUBSCRIPT() { return GetToken(JsonPathParser.SUBSCRIPT, 0); }
		public Jsonpath_subscriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonpath_subscript; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonpath_subscript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Jsonpath_subscriptContext jsonpath_subscript() {
		Jsonpath_subscriptContext _localctx = new Jsonpath_subscriptContext(Context, State);
		EnterRule(_localctx, 6, RULE_jsonpath_subscript);
		try {
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RECURSIVE_DESCENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; Match(RECURSIVE_DESCENT);
				State = 57;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case WILDCARD_SUBSCRIPT:
				case IN:
				case NIN:
				case SUBSETOF:
				case CONTAINS:
				case SIZE:
				case EMPTY:
				case TRUE:
				case FALSE:
				case ID:
					{
					State = 55; subscriptableBareword();
					}
					break;
				case BRACKET_LEFT:
					{
					State = 56; subscriptables();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 60;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
				case 1:
					{
					State = 59; jsonpath_subscript();
					}
					break;
				}
				}
				break;
			case SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(SUBSCRIPT);
				State = 63; subscriptableBareword();
				State = 65;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 64; jsonpath_subscript();
					}
					break;
				}
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 67; subscriptables();
				State = 69;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
				case 1:
					{
					State = 68; jsonpath_subscript();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptablesContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsonPathParser.BRACKET_LEFT, 0); }
		public SubscriptableContext[] subscriptable() {
			return GetRuleContexts<SubscriptableContext>();
		}
		public SubscriptableContext subscriptable(int i) {
			return GetRuleContext<SubscriptableContext>(i);
		}
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsonPathParser.BRACKET_RIGHT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(JsonPathParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonPathParser.COMMA, i);
		}
		public SubscriptablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptables; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptables(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptablesContext subscriptables() {
		SubscriptablesContext _localctx = new SubscriptablesContext(Context, State);
		EnterRule(_localctx, 8, RULE_subscriptables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73; Match(BRACKET_LEFT);
			State = 74; subscriptable();
			State = 79;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 75; Match(COMMA);
				State = 76; subscriptable();
				}
				}
				State = 81;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82; Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableArgumentsContext : ParserRuleContext {
		public ITerminalNode PAREN_LEFT() { return GetToken(JsonPathParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsonPathParser.PAREN_RIGHT, 0); }
		public Jsonpath__Context[] jsonpath__() {
			return GetRuleContexts<Jsonpath__Context>();
		}
		public Jsonpath__Context jsonpath__(int i) {
			return GetRuleContext<Jsonpath__Context>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsonPathParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonPathParser.COMMA, i);
		}
		public SubscriptableArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableArguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableArgumentsContext subscriptableArguments() {
		SubscriptableArgumentsContext _localctx = new SubscriptableArgumentsContext(Context, State);
		EnterRule(_localctx, 10, RULE_subscriptableArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 84; Match(PAREN_LEFT);
			State = 93;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CURRENT_VALUE) | (1L << ROOT_VALUE) | (1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << IDQUOTED) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 85; jsonpath__();
				State = 90;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 86; Match(COMMA);
					State = 87; jsonpath__();
					}
					}
					State = 92;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 95; Match(PAREN_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableBarewordContext : ParserRuleContext {
		public JsonPath_identifierContext jsonPath_identifier() {
			return GetRuleContext<JsonPath_identifierContext>(0);
		}
		public SubscriptableArgumentsContext subscriptableArguments() {
			return GetRuleContext<SubscriptableArgumentsContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsonPathParser.WILDCARD_SUBSCRIPT, 0); }
		public SubscriptableBarewordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptableBareword; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptableBareword(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableBarewordContext subscriptableBareword() {
		SubscriptableBarewordContext _localctx = new SubscriptableBarewordContext(Context, State);
		EnterRule(_localctx, 12, RULE_subscriptableBareword);
		try {
			State = 102;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN:
			case NIN:
			case SUBSETOF:
			case CONTAINS:
			case SIZE:
			case EMPTY:
			case TRUE:
			case FALSE:
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 97; jsonPath_identifier();
				State = 99;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
				case 1:
					{
					State = 98; subscriptableArguments();
					}
					break;
				}
				}
				break;
			case WILDCARD_SUBSCRIPT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonPath_identifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(JsonPathParser.ID, 0); }
		public ITerminalNode IN() { return GetToken(JsonPathParser.IN, 0); }
		public ITerminalNode NIN() { return GetToken(JsonPathParser.NIN, 0); }
		public ITerminalNode SUBSETOF() { return GetToken(JsonPathParser.SUBSETOF, 0); }
		public ITerminalNode CONTAINS() { return GetToken(JsonPathParser.CONTAINS, 0); }
		public ITerminalNode SIZE() { return GetToken(JsonPathParser.SIZE, 0); }
		public ITerminalNode EMPTY() { return GetToken(JsonPathParser.EMPTY, 0); }
		public ITerminalNode TRUE() { return GetToken(JsonPathParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsonPathParser.FALSE, 0); }
		public JsonPath_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonPath_identifier; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJsonPath_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonPath_identifierContext jsonPath_identifier() {
		JsonPath_identifierContext _localctx = new JsonPath_identifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_jsonPath_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IN) | (1L << NIN) | (1L << SUBSETOF) | (1L << CONTAINS) | (1L << SIZE) | (1L << EMPTY) | (1L << TRUE) | (1L << FALSE) | (1L << ID))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubscriptableContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonPathParser.STRING, 0); }
		public SliceableContext sliceable() {
			return GetRuleContext<SliceableContext>(0);
		}
		public ITerminalNode WILDCARD_SUBSCRIPT() { return GetToken(JsonPathParser.WILDCARD_SUBSCRIPT, 0); }
		public ITerminalNode QUESTION() { return GetToken(JsonPathParser.QUESTION, 0); }
		public ITerminalNode PAREN_LEFT() { return GetToken(JsonPathParser.PAREN_LEFT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsonPathParser.PAREN_RIGHT, 0); }
		public Jsonpath_Context jsonpath_() {
			return GetRuleContext<Jsonpath_Context>(0);
		}
		public ITerminalNode IDQUOTED() { return GetToken(JsonPathParser.IDQUOTED, 0); }
		public SubscriptableArgumentsContext subscriptableArguments() {
			return GetRuleContext<SubscriptableArgumentsContext>(0);
		}
		public SubscriptableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subscriptable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSubscriptable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SubscriptableContext subscriptable() {
		SubscriptableContext _localctx = new SubscriptableContext(Context, State);
		EnterRule(_localctx, 16, RULE_subscriptable);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 106; Match(STRING);
				}
				break;
			case COLON:
			case NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 107; sliceable();
				}
				break;
			case WILDCARD_SUBSCRIPT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 108; Match(WILDCARD_SUBSCRIPT);
				}
				break;
			case QUESTION:
				EnterOuterAlt(_localctx, 4);
				{
				State = 109; Match(QUESTION);
				State = 110; Match(PAREN_LEFT);
				State = 111; expression(0);
				State = 112; Match(PAREN_RIGHT);
				}
				break;
			case CURRENT_VALUE:
			case ROOT_VALUE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 114; jsonpath_();
				}
				break;
			case IDQUOTED:
				EnterOuterAlt(_localctx, 6);
				{
				State = 115; Match(IDQUOTED);
				State = 117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PAREN_LEFT) {
					{
					State = 116; subscriptableArguments();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsonPathParser.NUMBER, 0); }
		public SliceableLeftContext sliceableLeft() {
			return GetRuleContext<SliceableLeftContext>(0);
		}
		public SliceableRightContext sliceableRight() {
			return GetRuleContext<SliceableRightContext>(0);
		}
		public SliceableBinaryContext sliceableBinary() {
			return GetRuleContext<SliceableBinaryContext>(0);
		}
		public SliceableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceable; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableContext sliceable() {
		SliceableContext _localctx = new SliceableContext(Context, State);
		EnterRule(_localctx, 18, RULE_sliceable);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 121; Match(NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; sliceableLeft();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 123; sliceableRight();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 124; sliceableBinary();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableLeftContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(JsonPathParser.NUMBER, 0); }
		public ITerminalNode COLON() { return GetToken(JsonPathParser.COLON, 0); }
		public SliceableLeftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableLeft; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableLeft(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableLeftContext sliceableLeft() {
		SliceableLeftContext _localctx = new SliceableLeftContext(Context, State);
		EnterRule(_localctx, 20, RULE_sliceableLeft);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(NUMBER);
			State = 128; Match(COLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableRightContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(JsonPathParser.COLON, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsonPathParser.NUMBER, 0); }
		public SliceableRightContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableRight; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableRight(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableRightContext sliceableRight() {
		SliceableRightContext _localctx = new SliceableRightContext(Context, State);
		EnterRule(_localctx, 22, RULE_sliceableRight);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; Match(COLON);
			State = 131; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SliceableBinaryContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(JsonPathParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(JsonPathParser.NUMBER, i);
		}
		public ITerminalNode COLON() { return GetToken(JsonPathParser.COLON, 0); }
		public SliceableBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sliceableBinary; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSliceableBinary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SliceableBinaryContext sliceableBinary() {
		SliceableBinaryContext _localctx = new SliceableBinaryContext(Context, State);
		EnterRule(_localctx, 24, RULE_sliceableBinary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 133; Match(NUMBER);
			State = 134; Match(COLON);
			State = 135; Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public Jsonpath__Context jsonpath__() {
			return GetRuleContext<Jsonpath__Context>(0);
		}
		public ITerminalNode NOT() { return GetToken(JsonPathParser.NOT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode PAREN_LEFT() { return GetToken(JsonPathParser.PAREN_LEFT, 0); }
		public ITerminalNode PAREN_RIGHT() { return GetToken(JsonPathParser.PAREN_RIGHT, 0); }
		public BinaryOperatorContext[] binaryOperator() {
			return GetRuleContexts<BinaryOperatorContext>();
		}
		public BinaryOperatorContext binaryOperator(int i) {
			return GetRuleContext<BinaryOperatorContext>(i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 26;
		EnterRecursionRule(_localctx, 26, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_VALUE:
			case ROOT_VALUE:
			case TRUE:
			case FALSE:
			case NULL:
			case BRACE_LEFT:
			case BRACKET_LEFT:
			case IDQUOTED:
			case STRING:
			case NUMBER:
				{
				State = 138; jsonpath__();
				}
				break;
			case NOT:
				{
				State = 139; Match(NOT);
				State = 140; expression(3);
				}
				break;
			case PAREN_LEFT:
				{
				State = 141; Match(PAREN_LEFT);
				State = 142; expression(0);
				State = 143; Match(PAREN_RIGHT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 157;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 147;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 151;
					ErrorHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 148; binaryOperator();
							State = 149; expression(0);
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 153;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
					}
					} 
				}
				State = 159;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,18,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BinaryOperatorContext : ParserRuleContext {
		public ITerminalNode AND() { return GetToken(JsonPathParser.AND, 0); }
		public ITerminalNode OR() { return GetToken(JsonPathParser.OR, 0); }
		public ITerminalNode EQ() { return GetToken(JsonPathParser.EQ, 0); }
		public ITerminalNode NE() { return GetToken(JsonPathParser.NE, 0); }
		public ITerminalNode LT() { return GetToken(JsonPathParser.LT, 0); }
		public ITerminalNode LE() { return GetToken(JsonPathParser.LE, 0); }
		public ITerminalNode GT() { return GetToken(JsonPathParser.GT, 0); }
		public ITerminalNode GE() { return GetToken(JsonPathParser.GE, 0); }
		public ITerminalNode IN() { return GetToken(JsonPathParser.IN, 0); }
		public ITerminalNode NIN() { return GetToken(JsonPathParser.NIN, 0); }
		public ITerminalNode SUBSETOF() { return GetToken(JsonPathParser.SUBSETOF, 0); }
		public ITerminalNode CONTAINS() { return GetToken(JsonPathParser.CONTAINS, 0); }
		public ITerminalNode SIZE() { return GetToken(JsonPathParser.SIZE, 0); }
		public ITerminalNode EMPTY() { return GetToken(JsonPathParser.EMPTY, 0); }
		public BinaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_binaryOperator; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBinaryOperator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BinaryOperatorContext binaryOperator() {
		BinaryOperatorContext _localctx = new BinaryOperatorContext(Context, State);
		EnterRule(_localctx, 28, RULE_binaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << OR) | (1L << AND) | (1L << EQ) | (1L << GE) | (1L << GT) | (1L << LE) | (1L << LT) | (1L << NE) | (1L << IN) | (1L << NIN) | (1L << SUBSETOF) | (1L << CONTAINS) | (1L << SIZE) | (1L << EMPTY))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonContext : ParserRuleContext {
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public JsonContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_json; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitJson(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public JsonContext json() {
		JsonContext _localctx = new JsonContext(Context, State);
		EnterRule(_localctx, 30, RULE_json);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjContext : ParserRuleContext {
		public ITerminalNode BRACE_LEFT() { return GetToken(JsonPathParser.BRACE_LEFT, 0); }
		public ITerminalNode BRACE_RIGHT() { return GetToken(JsonPathParser.BRACE_RIGHT, 0); }
		public PairContext[] pair() {
			return GetRuleContexts<PairContext>();
		}
		public PairContext pair(int i) {
			return GetRuleContext<PairContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsonPathParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonPathParser.COMMA, i);
		}
		public ObjContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_obj; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitObj(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ObjContext obj() {
		ObjContext _localctx = new ObjContext(Context, State);
		EnterRule(_localctx, 32, RULE_obj);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 164; Match(BRACE_LEFT);
			State = 173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STRING) {
				{
				State = 165; pair();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 166; Match(COMMA);
					State = 167; pair();
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 175; Match(BRACE_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PairContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonPathParser.STRING, 0); }
		public ITerminalNode COLON() { return GetToken(JsonPathParser.COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pair; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PairContext pair() {
		PairContext _localctx = new PairContext(Context, State);
		EnterRule(_localctx, 34, RULE_pair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177; Match(STRING);
			State = 178; Match(COLON);
			State = 179; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayContext : ParserRuleContext {
		public ITerminalNode BRACKET_LEFT() { return GetToken(JsonPathParser.BRACKET_LEFT, 0); }
		public ITerminalNode BRACKET_RIGHT() { return GetToken(JsonPathParser.BRACKET_RIGHT, 0); }
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(JsonPathParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(JsonPathParser.COMMA, i);
		}
		public ArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArray(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayContext array() {
		ArrayContext _localctx = new ArrayContext(Context, State);
		EnterRule(_localctx, 36, RULE_array);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181; Match(BRACKET_LEFT);
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TRUE) | (1L << FALSE) | (1L << NULL) | (1L << BRACE_LEFT) | (1L << BRACKET_LEFT) | (1L << IDQUOTED) | (1L << STRING) | (1L << NUMBER))) != 0)) {
				{
				State = 182; value();
				State = 187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 183; Match(COMMA);
					State = 184; value();
					}
					}
					State = 189;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 192; Match(BRACKET_RIGHT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(JsonPathParser.STRING, 0); }
		public ITerminalNode IDQUOTED() { return GetToken(JsonPathParser.IDQUOTED, 0); }
		public ITerminalNode NUMBER() { return GetToken(JsonPathParser.NUMBER, 0); }
		public ITerminalNode TRUE() { return GetToken(JsonPathParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(JsonPathParser.FALSE, 0); }
		public ITerminalNode NULL() { return GetToken(JsonPathParser.NULL, 0); }
		public ObjContext obj() {
			return GetRuleContext<ObjContext>(0);
		}
		public ArrayContext array() {
			return GetRuleContext<ArrayContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJsonPathParserVisitor<TResult> typedVisitor = visitor as IJsonPathParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 38, RULE_value);
		try {
			State = 202;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 194; Match(STRING);
				}
				break;
			case IDQUOTED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 195; Match(IDQUOTED);
				}
				break;
			case NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 196; Match(NUMBER);
				}
				break;
			case TRUE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 197; Match(TRUE);
				}
				break;
			case FALSE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 198; Match(FALSE);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 199; Match(NULL);
				}
				break;
			case BRACE_LEFT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 200; obj();
				}
				break;
			case BRACKET_LEFT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 201; array();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 13: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\'', '\xCF', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '-', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x33', '\n', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '\x37', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '<', '\n', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '?', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x44', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', 'H', '\n', '\x5', '\x5', '\x5', 'J', '\n', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'P', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 'S', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 
		'[', '\n', '\a', '\f', '\a', '\xE', '\a', '^', '\v', '\a', '\x5', '\a', 
		'`', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x66', '\n', '\b', '\x3', '\b', '\x5', '\b', 'i', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x5', '\n', 'x', '\n', '\n', '\x5', '\n', 'z', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'\x80', '\n', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x94', 
		'\n', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x6', 
		'\xF', '\x9A', '\n', '\xF', '\r', '\xF', '\xE', '\xF', '\x9B', '\a', '\xF', 
		'\x9E', '\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xA1', '\v', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x12', '\x3', 
		'\x12', '\x3', '\x12', '\x3', '\x12', '\a', '\x12', '\xAB', '\n', '\x12', 
		'\f', '\x12', '\xE', '\x12', '\xAE', '\v', '\x12', '\x5', '\x12', '\xB0', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\xBC', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\xBF', '\v', '\x14', '\x5', '\x14', '\xC1', '\n', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', 
		'\x15', '\xCD', '\n', '\x15', '\x3', '\x15', '\x2', '\x3', '\x1C', '\x16', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '\x2', 
		'\x5', '\x4', '\x2', '\x3', '\x3', '\x5', '\x5', '\x4', '\x2', '\x11', 
		'\x18', '#', '#', '\x4', '\x2', '\b', '\xF', '\x11', '\x16', '\x2', '\xE0', 
		'\x2', '*', '\x3', '\x2', '\x2', '\x2', '\x4', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x6', '\x36', '\x3', '\x2', '\x2', '\x2', '\b', 'I', '\x3', '\x2', 
		'\x2', '\x2', '\n', 'K', '\x3', '\x2', '\x2', '\x2', '\f', 'V', '\x3', 
		'\x2', '\x2', '\x2', '\xE', 'h', '\x3', '\x2', '\x2', '\x2', '\x10', 'j', 
		'\x3', '\x2', '\x2', '\x2', '\x12', 'y', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x16', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x18', '\x84', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x87', '\x3', 
		'\x2', '\x2', '\x2', '\x1C', '\x93', '\x3', '\x2', '\x2', '\x2', '\x1E', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', ' ', '\xA4', '\x3', '\x2', '\x2', 
		'\x2', '\"', '\xA6', '\x3', '\x2', '\x2', '\x2', '$', '\xB3', '\x3', '\x2', 
		'\x2', '\x2', '&', '\xB7', '\x3', '\x2', '\x2', '\x2', '(', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '*', ',', '\a', '\x5', '\x2', '\x2', '+', '-', '\x5', 
		'\b', '\x5', '\x2', ',', '+', '\x3', '\x2', '\x2', '\x2', ',', '-', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', '.', '/', '\a', 
		'\x2', '\x2', '\x3', '/', '\x3', '\x3', '\x2', '\x2', '\x2', '\x30', '\x32', 
		'\t', '\x2', '\x2', '\x2', '\x31', '\x33', '\x5', '\b', '\x5', '\x2', 
		'\x32', '\x31', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', '\x3', '\x2', 
		'\x2', '\x2', '\x33', '\x5', '\x3', '\x2', '\x2', '\x2', '\x34', '\x37', 
		'\x5', '\x4', '\x3', '\x2', '\x35', '\x37', '\x5', '(', '\x15', '\x2', 
		'\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', '\x3', '\x2', 
		'\x2', '\x2', '\x37', '\a', '\x3', '\x2', '\x2', '\x2', '\x38', ';', '\a', 
		'\x4', '\x2', '\x2', '\x39', '<', '\x5', '\xE', '\b', '\x2', ':', '<', 
		'\x5', '\n', '\x6', '\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', ';', 
		':', '\x3', '\x2', '\x2', '\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', 
		'=', '?', '\x5', '\b', '\x5', '\x2', '>', '=', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\x3', '\x2', '\x2', '\x2', '?', 'J', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\a', '\x6', '\x2', '\x2', '\x41', '\x43', '\x5', '\xE', 
		'\b', '\x2', '\x42', '\x44', '\x5', '\b', '\x5', '\x2', '\x43', '\x42', 
		'\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', 
		'\x44', 'J', '\x3', '\x2', '\x2', '\x2', '\x45', 'G', '\x5', '\n', '\x6', 
		'\x2', '\x46', 'H', '\x5', '\b', '\x5', '\x2', 'G', '\x46', '\x3', '\x2', 
		'\x2', '\x2', 'G', 'H', '\x3', '\x2', '\x2', '\x2', 'H', 'J', '\x3', '\x2', 
		'\x2', '\x2', 'I', '\x38', '\x3', '\x2', '\x2', '\x2', 'I', '@', '\x3', 
		'\x2', '\x2', '\x2', 'I', '\x45', '\x3', '\x2', '\x2', '\x2', 'J', '\t', 
		'\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\x1C', '\x2', '\x2', 'L', 
		'Q', '\x5', '\x12', '\n', '\x2', 'M', 'N', '\a', '\x1F', '\x2', '\x2', 
		'N', 'P', '\x5', '\x12', '\n', '\x2', 'O', 'M', '\x3', '\x2', '\x2', '\x2', 
		'P', 'S', '\x3', '\x2', '\x2', '\x2', 'Q', 'O', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\x3', '\x2', '\x2', '\x2', 'R', 'T', '\x3', '\x2', '\x2', '\x2', 
		'S', 'Q', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\a', '\x1D', '\x2', '\x2', 
		'U', '\v', '\x3', '\x2', '\x2', '\x2', 'V', '_', '\a', ' ', '\x2', '\x2', 
		'W', '\\', '\x5', '\x6', '\x4', '\x2', 'X', 'Y', '\a', '\x1F', '\x2', 
		'\x2', 'Y', '[', '\x5', '\x6', '\x4', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', 
		'\x2', '[', '^', '\x3', '\x2', '\x2', '\x2', '\\', 'Z', '\x3', '\x2', 
		'\x2', '\x2', '\\', ']', '\x3', '\x2', '\x2', '\x2', ']', '`', '\x3', 
		'\x2', '\x2', '\x2', '^', '\\', '\x3', '\x2', '\x2', '\x2', '_', 'W', 
		'\x3', '\x2', '\x2', '\x2', '_', '`', '\x3', '\x2', '\x2', '\x2', '`', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '!', '\x2', 
		'\x2', '\x62', '\r', '\x3', '\x2', '\x2', '\x2', '\x63', '\x65', '\x5', 
		'\x10', '\t', '\x2', '\x64', '\x66', '\x5', '\f', '\a', '\x2', '\x65', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x65', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', 'i', '\a', '\a', 
		'\x2', '\x2', 'h', '\x63', '\x3', '\x2', '\x2', '\x2', 'h', 'g', '\x3', 
		'\x2', '\x2', '\x2', 'i', '\xF', '\x3', '\x2', '\x2', '\x2', 'j', 'k', 
		'\t', '\x3', '\x2', '\x2', 'k', '\x11', '\x3', '\x2', '\x2', '\x2', 'l', 
		'z', '\a', '%', '\x2', '\x2', 'm', 'z', '\x5', '\x14', '\v', '\x2', 'n', 
		'z', '\a', '\a', '\x2', '\x2', 'o', 'p', '\a', '\"', '\x2', '\x2', 'p', 
		'q', '\a', ' ', '\x2', '\x2', 'q', 'r', '\x5', '\x1C', '\xF', '\x2', 'r', 
		's', '\a', '!', '\x2', '\x2', 's', 'z', '\x3', '\x2', '\x2', '\x2', 't', 
		'z', '\x5', '\x4', '\x3', '\x2', 'u', 'w', '\a', '$', '\x2', '\x2', 'v', 
		'x', '\x5', '\f', '\a', '\x2', 'w', 'v', '\x3', '\x2', '\x2', '\x2', 'w', 
		'x', '\x3', '\x2', '\x2', '\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 
		'y', 'l', '\x3', '\x2', '\x2', '\x2', 'y', 'm', '\x3', '\x2', '\x2', '\x2', 
		'y', 'n', '\x3', '\x2', '\x2', '\x2', 'y', 'o', '\x3', '\x2', '\x2', '\x2', 
		'y', 't', '\x3', '\x2', '\x2', '\x2', 'y', 'u', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x13', '\x3', '\x2', '\x2', '\x2', '{', '\x80', '\a', '&', '\x2', 
		'\x2', '|', '\x80', '\x5', '\x16', '\f', '\x2', '}', '\x80', '\x5', '\x18', 
		'\r', '\x2', '~', '\x80', '\x5', '\x1A', '\xE', '\x2', '\x7F', '{', '\x3', 
		'\x2', '\x2', '\x2', '\x7F', '|', '\x3', '\x2', '\x2', '\x2', '\x7F', 
		'}', '\x3', '\x2', '\x2', '\x2', '\x7F', '~', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x15', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', '\a', '&', 
		'\x2', '\x2', '\x82', '\x83', '\a', '\x1E', '\x2', '\x2', '\x83', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x84', '\x85', '\a', '\x1E', '\x2', '\x2', 
		'\x85', '\x86', '\a', '&', '\x2', '\x2', '\x86', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\x87', '\x88', '\a', '&', '\x2', '\x2', '\x88', '\x89', 
		'\a', '\x1E', '\x2', '\x2', '\x89', '\x8A', '\a', '&', '\x2', '\x2', '\x8A', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x8C', '\b', '\xF', '\x1', 
		'\x2', '\x8C', '\x94', '\x5', '\x6', '\x4', '\x2', '\x8D', '\x8E', '\a', 
		'\x10', '\x2', '\x2', '\x8E', '\x94', '\x5', '\x1C', '\xF', '\x5', '\x8F', 
		'\x90', '\a', ' ', '\x2', '\x2', '\x90', '\x91', '\x5', '\x1C', '\xF', 
		'\x2', '\x91', '\x92', '\a', '!', '\x2', '\x2', '\x92', '\x94', '\x3', 
		'\x2', '\x2', '\x2', '\x93', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x93', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x94', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x95', '\x99', '\f', 
		'\x3', '\x2', '\x2', '\x96', '\x97', '\x5', '\x1E', '\x10', '\x2', '\x97', 
		'\x98', '\x5', '\x1C', '\xF', '\x2', '\x98', '\x9A', '\x3', '\x2', '\x2', 
		'\x2', '\x99', '\x96', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x9B', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', 
		'\x9C', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9D', '\x95', '\x3', '\x2', '\x2', '\x2', '\x9E', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x9F', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\xA0', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\x9F', '\x3', '\x2', '\x2', '\x2', '\xA2', '\xA3', '\t', 
		'\x4', '\x2', '\x2', '\xA3', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA5', '\x5', '(', '\x15', '\x2', '\xA5', '!', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\xAF', '\a', '\x1A', '\x2', '\x2', '\xA7', '\xAC', '\x5', '$', 
		'\x13', '\x2', '\xA8', '\xA9', '\a', '\x1F', '\x2', '\x2', '\xA9', '\xAB', 
		'\x5', '$', '\x13', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', 
		'\xAB', '\xAE', '\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xB0', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', 
		'\xAF', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\xB1', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', 
		'\a', '\x1B', '\x2', '\x2', '\xB2', '#', '\x3', '\x2', '\x2', '\x2', '\xB3', 
		'\xB4', '\a', '%', '\x2', '\x2', '\xB4', '\xB5', '\a', '\x1E', '\x2', 
		'\x2', '\xB5', '\xB6', '\x5', '(', '\x15', '\x2', '\xB6', '%', '\x3', 
		'\x2', '\x2', '\x2', '\xB7', '\xC0', '\a', '\x1C', '\x2', '\x2', '\xB8', 
		'\xBD', '\x5', '(', '\x15', '\x2', '\xB9', '\xBA', '\a', '\x1F', '\x2', 
		'\x2', '\xBA', '\xBC', '\x5', '(', '\x15', '\x2', '\xBB', '\xB9', '\x3', 
		'\x2', '\x2', '\x2', '\xBC', '\xBF', '\x3', '\x2', '\x2', '\x2', '\xBD', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBD', '\xBE', '\x3', '\x2', '\x2', 
		'\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xBD', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xC0', 
		'\xC1', '\x3', '\x2', '\x2', '\x2', '\xC1', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC2', '\xC3', '\a', '\x1D', '\x2', '\x2', '\xC3', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\xCD', '\a', '%', '\x2', '\x2', '\xC5', 
		'\xCD', '\a', '$', '\x2', '\x2', '\xC6', '\xCD', '\a', '&', '\x2', '\x2', 
		'\xC7', '\xCD', '\a', '\x17', '\x2', '\x2', '\xC8', '\xCD', '\a', '\x18', 
		'\x2', '\x2', '\xC9', '\xCD', '\a', '\x19', '\x2', '\x2', '\xCA', '\xCD', 
		'\x5', '\"', '\x12', '\x2', '\xCB', '\xCD', '\x5', '&', '\x14', '\x2', 
		'\xCC', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC5', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xC6', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\xC8', '\x3', '\x2', '\x2', '\x2', 
		'\xCC', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCA', '\x3', '\x2', 
		'\x2', '\x2', '\xCC', '\xCB', '\x3', '\x2', '\x2', '\x2', '\xCD', ')', 
		'\x3', '\x2', '\x2', '\x2', '\x1A', ',', '\x32', '\x36', ';', '>', '\x43', 
		'G', 'I', 'Q', '\\', '_', '\x65', 'h', 'w', 'y', '\x7F', '\x93', '\x9B', 
		'\x9F', '\xAC', '\xAF', '\xBD', '\xC0', '\xCC',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.JPath.Parsers
